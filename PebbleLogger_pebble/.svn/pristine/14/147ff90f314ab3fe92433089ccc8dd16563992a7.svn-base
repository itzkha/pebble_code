#include <pebble.h>
#include <inttypes.h>
static Window *window;

static ActionBarLayer *action_bar_layer;

static const uint32_t ACCEL_LOG_TAG = 0xd5;

static const uint32_t ACCEL_SAMPLES_PER_UPDATE = 10;

//static uint32_t acc_count = 0;
//static uint32_t fail_count = 0;

static uint16_t start_stop_flag = 0; // 1 for start, 2 for stop, 0 for failed


static const int RESOURCE_IDS[2] = {
  RESOURCE_ID_IMAGE_ACTION_ICON_PLAY,
  RESOURCE_ID_IMAGE_ACTION_ICON_STOP
};

typedef struct {
  // the accelerometer data
  // 16 bytes with x, y, z, did_vibrate, timestamp
  AccelData data;
} LoggingData;

DataLoggingSessionRef accel_logging_session;

static TextLayer *time_layer;
static TextLayer *date_layer;
static TextLayer *accel_layer;
static TextLayer *info_layer;

static void accel_data_handler(AccelData *data, uint32_t num_samples) {
  //acc_count++;
  //APP_LOG(APP_LOG_LEVEL_DEBUG, "accel handler is called");
    
  //LoggingData *logging_data = malloc(sizeof(LoggingData) * num_samples);
  
  //for (uint32_t i = 0; i < num_samples; i++) {
   
    //APP_LOG(APP_LOG_LEVEL_DEBUG, "Time %"PRIu64", X %hd, Y %hd, Z %hd, isvibrate %d", data[i].timestamp, data[i].x, data[i].y, data[i].z, data[i].did_vibrate);
    //memcpy(&logging_data[i].data, &data[i], sizeof(AccelData));
    //APP_LOG(APP_LOG_LEVEL_DEBUG, "Time %"PRIu64", X %hd, Y %hd, Z %hd, isvibrate %d", logging_data[i].data.timestamp, logging_data[i].data.x, logging_data[i].data.y, logging_data[i].data.z, logging_data[i].data.did_vibrate);
    
  //    }
 
    //APP_LOG(APP_LOG_LEVEL_DEBUG, "Time %"PRIu64", X %hd, Y %hd, Z %hd, isvibrate %d", data[num_samples-1].timestamp, data[num_samples-1].x, data[num_samples-1].y, data[num_samples-1].z, data[num_samples-1].did_vibrate);
  //DataLoggingResult r = data_logging_log(accel_logging_session, logging_data, num_samples);
  //free(logging_data);
}

// ---- ACCEL INIT AND DE-INIT ----
static void init_accel(void){
    // Initiate the logging session for accel data
    //accel_logging_session = data_logging_create(ACCEL_LOG_TAG, DATA_LOGGING_BYTE_ARRAY, sizeof(LoggingData), true);
  accel_data_service_subscribe(ACCEL_SAMPLES_PER_UPDATE, &accel_data_handler);  
  accel_service_set_sampling_rate(ACCEL_SAMPLING_100HZ); 
  
  text_layer_set_text(accel_layer, "Accel is: ON");
  APP_LOG(APP_LOG_LEVEL_DEBUG, "Init_accel is called");
}

static void deinit_accel(void) {
    
    accel_data_service_unsubscribe();
    //data_logging_finish(accel_logging_session);
    
    APP_LOG(APP_LOG_LEVEL_DEBUG, "De-init_accel is called");
    text_layer_set_text(accel_layer, "Accel is: OFF");
}

// ---- AppMessage Handlers ----
 void out_sent_handler(DictionaryIterator *sent, void *context) {
   // outgoing message was delivered
   
   if(start_stop_flag == 1) {

     // show text confirming the start marker was set
     text_layer_set_text(info_layer, "Got it, start marker sent!");
   } else if (start_stop_flag == 2) {
     text_layer_set_text(info_layer, "Got it, stop marker sent!");
   } else if (start_stop_flag == 3) {
     text_layer_set_text(info_layer, "Ok, start marker cancelled!");
   } else if (start_stop_flag == 4) {
     text_layer_set_text(info_layer, "Ok, stop marker cancelled!");
   }

   // show text confirming the end marker was set
 }


 void out_failed_handler(DictionaryIterator *failed, AppMessageResult reason, void *context) {
   // outgoing message failed
   start_stop_flag = 0;
   text_layer_set_text(info_layer, "Oops, marking failed! Try again?");
 }


 void in_received_handler(DictionaryIterator *received, void *context) {
   // incoming message received
 }


 void in_dropped_handler(AppMessageResult reason, void *context) {
   // incoming message dropped

 }


static void select_click_handler(ClickRecognizerRef recognizer, void *context) {
  init_accel();
  text_layer_set_text(accel_layer, "Accel is: ON");
}

static void select_long_click_handler(ClickRecognizerRef recognizer, void *context) {
  deinit_accel();
  text_layer_set_text(accel_layer, "Accel is: OFF");
}

// Message keys: 1 -> startAct, 0 -> stopAct, 3 -> cancelStartAct, 2 -> cancelStopAct
static void up_click_handler(ClickRecognizerRef recognizer, void *context) {

   DictionaryIterator *iter;
   Tuplet value = TupletInteger(1, time(NULL));

   app_message_outbox_begin(&iter);
   
   dict_write_tuplet(iter, &value);
   
   app_message_outbox_send();
   start_stop_flag = 1;
}

static void down_click_handler(ClickRecognizerRef recognizer, void *context) {
   DictionaryIterator *iter;
   Tuplet value = TupletInteger(0, time(NULL));

   app_message_outbox_begin(&iter);
   
   dict_write_tuplet(iter, &value);

   app_message_outbox_send();
   start_stop_flag = 2;
}

static void up_long_click_handler(ClickRecognizerRef recognizer, void *context) {
   DictionaryIterator *iter;
   Tuplet value = TupletInteger(3, time(NULL));

   app_message_outbox_begin(&iter);
   
   dict_write_tuplet(iter, &value);

   app_message_outbox_send();
   start_stop_flag = 3;
}

static void down_long_click_handler(ClickRecognizerRef recognizer, void *context) {
   DictionaryIterator *iter;
   Tuplet value = TupletInteger(2, time(NULL));

   app_message_outbox_begin(&iter);
   
   dict_write_tuplet(iter, &value);

   app_message_outbox_send();
   start_stop_flag = 4;
}

static void click_config_provider(void *context) {
  window_single_click_subscribe(BUTTON_ID_SELECT, select_click_handler);
  window_single_click_subscribe(BUTTON_ID_UP, up_click_handler);
  window_single_click_subscribe(BUTTON_ID_DOWN, down_click_handler);
  window_long_click_subscribe(BUTTON_ID_SELECT, 0, select_long_click_handler, NULL);

  window_long_click_subscribe(BUTTON_ID_UP, 0, up_long_click_handler, NULL);
  window_long_click_subscribe(BUTTON_ID_DOWN, 0,down_long_click_handler, NULL);
}

static void display_time(struct tm *tick_time) {
  uint8_t len = snprintf(NULL, 0, "%02i:%02i",tick_time->tm_hour, tick_time->tm_min);
  
  char * time_string = malloc(len+1);
  snprintf(time_string, len+1, "%02i:%02i",tick_time->tm_hour, tick_time->tm_min);

  text_layer_set_text(time_layer, time_string);
}


static void handle_minute_tick(struct tm *tick_time, TimeUnits units_changed) {
  display_time(tick_time);
  
  /*
  static uint32_t last_count = 0;
  static char msg[30];
  static char fail_msg[30];
  
  if (acc_count>last_count) {
    //Accelerometer handler function increasing as intended
    snprintf(msg, sizeof(msg), "Acc count %lu:", acc_count);
    text_layer_set_text(accel_layer, msg);
    last_count = acc_count;
  }
  else {
    if (last_count!=0) {
      deinit_accel();
      fail_count++;
      acc_count = 0; last_count = 0;
      init_accel();
    }
  }
  snprintf(fil_msg, sizeof(fail_msg), "Fails:%lu  last acc_count: %lu", fail_count, acc_count);
  text_layer_set_text(info_layer, fail_msg);
  */
}

static void display_date(struct tm *tick_time) {

  const char * months[] = { "Jan", "Feb", "Mar", "Apr",
			    "May", "Jun", "Jul", "Aug",
			    "Sep", "Oct", "Nov", "Dec"};
  uint8_t len = snprintf(NULL, 0, "Date: %s. %i",months[tick_time->tm_mon],tick_time->tm_mday);

  char * date_string = malloc(len+1);
  snprintf(date_string, len+1, "Date: %s. %i",months[tick_time->tm_mon],tick_time->tm_mday);
  
  text_layer_set_text(date_layer, date_string);
}

static void handle_day_tick(struct tm *tick_time, TimeUnits units_changed) {
  display_date(tick_time);
}

void handle_tick(struct tm *tick_time, TimeUnits units_changed) {
  if (units_changed & MINUTE_UNIT) {
    handle_minute_tick(tick_time, units_changed);
  }
  
  if (units_changed & DAY_UNIT) {
    handle_day_tick(tick_time, units_changed);
  }
}

static void action_bar_init(Window *window) {
  GBitmap *bitmap_play = gbitmap_create_with_resource(RESOURCE_IDS[0]);
  GBitmap *bitmap_stop = gbitmap_create_with_resource(RESOURCE_IDS[1]);

  action_bar_layer = action_bar_layer_create();
  action_bar_layer_add_to_window(action_bar_layer, window);
  action_bar_layer_set_click_config_provider(action_bar_layer, click_config_provider);
  action_bar_layer_set_icon(action_bar_layer, BUTTON_ID_UP, bitmap_play);
  //action_bar_layer_set_icon(action_bar_layer, BUTTON_ID_SELECT, s_animal_datas[1].bitmap);
  action_bar_layer_set_icon(action_bar_layer, BUTTON_ID_DOWN, bitmap_stop);
}


static void on_window_load(Window *window) {
  Layer *window_layer = window_get_root_layer(window);
  GRect bounds = layer_get_bounds(window_layer);

  time_layer = text_layer_create(GRect(0,0,120,50));
  date_layer = text_layer_create(GRect(0,50, 120,30));
  accel_layer = text_layer_create(GRect(0,80,120,30));
  info_layer = text_layer_create(GRect(0,110,120,30));
  time_t now = time(NULL);
  struct tm *tick_time = localtime(&now);

  display_time(tick_time);
  display_date(tick_time);

  // subscribe for time and date ticker
  tick_timer_service_subscribe(MINUTE_UNIT | DAY_UNIT, &handle_tick);
  
  // draw action bar icons
  action_bar_init(window);

  // set parameters and draw text
  text_layer_set_font(time_layer, fonts_get_system_font(FONT_KEY_BITHAM_42_BOLD));
  text_layer_set_font(date_layer, fonts_get_system_font(FONT_KEY_GOTHIC_18_BOLD));  
  text_layer_set_font(accel_layer, fonts_get_system_font(FONT_KEY_GOTHIC_14_BOLD));
  text_layer_set_font(info_layer, fonts_get_system_font(FONT_KEY_GOTHIC_14_BOLD));

  text_layer_set_text_alignment(time_layer, GTextAlignmentCenter);
  text_layer_set_text_alignment(date_layer, GTextAlignmentCenter);
  text_layer_set_text_alignment(accel_layer, GTextAlignmentCenter);
  text_layer_set_text_alignment(info_layer, GTextAlignmentCenter);

  layer_add_child(window_layer, text_layer_get_layer(time_layer));
  layer_add_child(window_layer, text_layer_get_layer(date_layer));
  layer_add_child(window_layer, text_layer_get_layer(accel_layer));
  layer_add_child(window_layer, text_layer_get_layer(info_layer));

  // subscribe for accel reading
  //text_layer_set_text(accel_layer, "Accel is: ON");
  init_accel();

  // initialization for appmessage
  app_message_register_inbox_received(in_received_handler);
   app_message_register_inbox_dropped(in_dropped_handler);
   app_message_register_outbox_sent(out_sent_handler);
   app_message_register_outbox_failed(out_failed_handler);

   const uint32_t inbound_size = 64;
   const uint32_t outbound_size = 64;
   app_message_open(inbound_size, outbound_size);

}

static void on_window_unload(Window *window) {
 

  text_layer_destroy(time_layer);
  text_layer_destroy(date_layer);
  text_layer_destroy(accel_layer);
  text_layer_destroy(info_layer);
  // unsubscribe for accel data logging
  deinit_accel();
  window_destroy(window);

}

int main(void) {
  window = window_create();
  window_set_click_config_provider(window, click_config_provider);
  window_set_window_handlers(window, (WindowHandlers) {
    .load = on_window_load,
    .unload = on_window_unload,
  });
    
  window_stack_push(window, true /* Animated */);
  app_event_loop();

}
